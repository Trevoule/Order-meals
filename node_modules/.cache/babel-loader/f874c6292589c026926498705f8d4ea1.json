{"ast":null,"code":"var _jsxFileName = \"/home/vladislav/Desktop/Work - Backup/React/react-meals/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport classes from \"./Checkout.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotEmpty = value => value.trim() !== \"\";\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHanlder: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetInputHasError,\n    valueChangeHandler: streetChangeHandler,\n    inputBlurHanlder: streetBlurHandler,\n    reset: resetStreetInput\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredCity,\n    isValid: enteredCityIsValid,\n    hasError: cityInputHasError,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHanlder: cityBlurHandler,\n    reset: resetCityInput\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredPostalCode,\n    isValid: enteredPostalCodeIsValid,\n    hasError: postalCodeInputHasError,\n    valueChangeHandler: postalCodeChangeHandler,\n    inputBlurHanlder: postalCodeBlurHandler,\n    reset: resetPostalCodeInput\n  } = useInput(isFiveChars); //   const [formInputsValidity, setFormInputsValidity] = useState({\n  //     name: true,\n  //     street: true,\n  //     city: true,\n  //     postalCode: true,\n  //   });\n  //   const nameInputRef = useRef();\n  //   const streetInputRef = useRef();\n  //   const postalCodeInputRef = useRef();\n  //   const cityInputRef = useRef();\n\n  const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n\n  const confirmHandler = event => {\n    event.preventDefault(); // const enteredName = nameInputRef.current.value;\n    // const enteredStreet = streetInputRef.current.value;\n    // const enteredPostalCode = postalCodeInputRef.current.value;\n    // const enteredCity = cityInputRef.current.value;\n    // const enteredNameIsValid = !isEmpty(enteredName);\n    // const enteredStreetIsValid = !isEmpty(enteredStreet);\n    // const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    // const enteredCityIsValid = !isEmpty(enteredCity);\n    // setFormInputsValidity({\n    //   name: enteredNameIsValid,\n    //   street: enteredStreetIsValid,\n    //   city: enteredCityIsValid,\n    //   postalCode: enteredPostalCodeIsValid,\n    // });\n\n    const nameControlClasses = nameInputHasError ? classes.invalid : \"\";\n    const streetControlClasses = streetInputHasError ? classes.invalid : \"\";\n    const cityControlClasses = cityInputHasError ? classes.invalid : \"\";\n    const postalCodeControlClasses = postalCodeInputHasError ? classes.invalid : \"\";\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const orderData = {\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode\n    };\n    props.onConfirm(orderData);\n    props.onClear();\n    resetNameInput();\n    resetStreetInput();\n    resetCityInput();\n    resetPostalCodeInput();\n  }; //   const nameControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const streetControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const cityControlClasses = !formInputsValidity.city ? classes.invalid : \"\";\n  //   const postalCodeControlClasses = !formInputsValidity.postalCode ? classes.invalid: \"\";\n  // const nameControlClasses = nameInputHasError ? classes.invalid : \"\";\n  // const streetControlClasses = streetInputHasError ? classes.invalid : \"\";\n  // const cityControlClasses = cityInputHasError ? classes.invalid : \"\";\n  // const postalCodeControlClasses = postalCodeInputHasError\n  //   ? classes.invalid\n  //   : \"\";\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${nameControlClasses}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${streetControlClasses}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        onChange: streetChangeHandler,\n        onBlur: streetBlurHandler,\n        value: enteredStreet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), streetInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${postalCodeControlClasses}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        onChange: postalCodeChangeHandler,\n        onBlur: postalCodeBlurHandler,\n        value: enteredPostalCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), postalCodeInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid post code.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${cityControlClasses}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        onChange: cityChangeHandler,\n        onBlur: cityBlurHandler,\n        value: enteredCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), cityInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid ? true : false,\n        className: classes.submit,\n        type: \"submit\",\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"kLe6ZGQV9bSeO3k7Bg7IxAW8XGM=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/home/vladislav/Desktop/Work - Backup/React/react-meals/src/components/Cart/Checkout.js"],"names":["useRef","useState","useInput","classes","isNotEmpty","value","trim","isFiveChars","length","Checkout","props","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHanlder","nameBlurHandler","reset","resetNameInput","enteredStreet","enteredStreetIsValid","streetInputHasError","streetChangeHandler","streetBlurHandler","resetStreetInput","enteredCity","enteredCityIsValid","cityInputHasError","cityChangeHandler","cityBlurHandler","resetCityInput","enteredPostalCode","enteredPostalCodeIsValid","postalCodeInputHasError","postalCodeChangeHandler","postalCodeBlurHandler","resetPostalCodeInput","formIsValid","confirmHandler","event","preventDefault","nameControlClasses","invalid","streetControlClasses","cityControlClasses","postalCodeControlClasses","orderData","name","street","city","postalCode","onConfirm","onClear","form","control","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nimport classes from \"./Checkout.module.css\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\nconst isFiveChars = (value) => value.trim().length === 5;\n\nconst Checkout = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHanlder: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetInputHasError,\n    valueChangeHandler: streetChangeHandler,\n    inputBlurHanlder: streetBlurHandler,\n    reset: resetStreetInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredCity,\n    isValid: enteredCityIsValid,\n    hasError: cityInputHasError,\n    valueChangeHandler: cityChangeHandler,\n    inputBlurHanlder: cityBlurHandler,\n    reset: resetCityInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredPostalCode,\n    isValid: enteredPostalCodeIsValid,\n    hasError: postalCodeInputHasError,\n    valueChangeHandler: postalCodeChangeHandler,\n    inputBlurHanlder: postalCodeBlurHandler,\n    reset: resetPostalCodeInput,\n  } = useInput(isFiveChars);\n\n  //   const [formInputsValidity, setFormInputsValidity] = useState({\n  //     name: true,\n  //     street: true,\n  //     city: true,\n  //     postalCode: true,\n  //   });\n\n  //   const nameInputRef = useRef();\n  //   const streetInputRef = useRef();\n  //   const postalCodeInputRef = useRef();\n  //   const cityInputRef = useRef();\n\n  const formIsValid =\n    enteredNameIsValid &&\n    enteredStreetIsValid &&\n    enteredCityIsValid &&\n    enteredPostalCodeIsValid;\n\n  const confirmHandler = (event) => {\n    event.preventDefault();\n\n    // const enteredName = nameInputRef.current.value;\n    // const enteredStreet = streetInputRef.current.value;\n    // const enteredPostalCode = postalCodeInputRef.current.value;\n    // const enteredCity = cityInputRef.current.value;\n\n    // const enteredNameIsValid = !isEmpty(enteredName);\n    // const enteredStreetIsValid = !isEmpty(enteredStreet);\n    // const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    // const enteredCityIsValid = !isEmpty(enteredCity);\n\n    // setFormInputsValidity({\n    //   name: enteredNameIsValid,\n    //   street: enteredStreetIsValid,\n    //   city: enteredCityIsValid,\n    //   postalCode: enteredPostalCodeIsValid,\n    // });\n\n    const nameControlClasses = nameInputHasError ? classes.invalid : \"\";\n    const streetControlClasses = streetInputHasError ? classes.invalid : \"\";\n    const cityControlClasses = cityInputHasError ? classes.invalid : \"\";\n    const postalCodeControlClasses = postalCodeInputHasError\n      ? classes.invalid\n      : \"\";\n\n    const formIsValid =\n      enteredNameIsValid &&\n      enteredStreetIsValid &&\n      enteredCityIsValid &&\n      enteredPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const orderData = {\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostalCode,\n    };\n\n    props.onConfirm(orderData);\n    props.onClear();\n\n    resetNameInput();\n    resetStreetInput();\n    resetCityInput();\n    resetPostalCodeInput();\n  };\n\n  //   const nameControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const streetControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const cityControlClasses = !formInputsValidity.city ? classes.invalid : \"\";\n  //   const postalCodeControlClasses = !formInputsValidity.postalCode ? classes.invalid: \"\";\n\n  // const nameControlClasses = nameInputHasError ? classes.invalid : \"\";\n  // const streetControlClasses = streetInputHasError ? classes.invalid : \"\";\n  // const cityControlClasses = cityInputHasError ? classes.invalid : \"\";\n  // const postalCodeControlClasses = postalCodeInputHasError\n  //   ? classes.invalid\n  //   : \"\";\n\n  return (\n    <form className={classes.form} onSubmit={confirmHandler}>\n      <div className={`${classes.control} ${nameControlClasses}`}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && <p>Please enter a valid name.</p>}\n      </div>\n      <div className={`${classes.control} ${streetControlClasses}`}>\n        <label htmlFor=\"street\">Street</label>\n        <input\n          type=\"text\"\n          id=\"street\"\n          onChange={streetChangeHandler}\n          onBlur={streetBlurHandler}\n          value={enteredStreet}\n        />\n        {streetInputHasError && <p>Please enter a valid street.</p>}\n      </div>\n      <div className={`${classes.control} ${postalCodeControlClasses}`}>\n        <label htmlFor=\"postal\">Postal Code</label>\n        <input\n          type=\"text\"\n          id=\"postal\"\n          onChange={postalCodeChangeHandler}\n          onBlur={postalCodeBlurHandler}\n          value={enteredPostalCode}\n        />\n        {postalCodeInputHasError && <p>Please enter a valid post code.</p>}\n      </div>\n      <div className={`${classes.control} ${cityControlClasses}`}>\n        <label htmlFor=\"city\">City</label>\n        <input\n          type=\"text\"\n          id=\"city\"\n          onChange={cityChangeHandler}\n          onBlur={cityBlurHandler}\n          value={enteredCity}\n        />\n        {cityInputHasError && <p>Please enter a valid city.</p>}\n      </div>\n      <div className={classes.actions}>\n        <button type=\"button\" onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button\n          disabled={!formIsValid ? true : false}\n          className={classes.submit}\n          type=\"submit\"\n        >\n          Confirm\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}