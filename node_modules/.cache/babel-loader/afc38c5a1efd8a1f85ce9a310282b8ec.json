{"ast":null,"code":"var _jsxFileName = \"/home/vladislav/Desktop/Work - Backup/React/react-meals/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport classes from \"./Checkout.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotEmpty = value => value.trim() !== \"\"; // const isFiveChars = (value) => value.trim().length === 5;\n\n\nconst Checkout = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHanlder: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(isNotEmpty);\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetInputHasError,\n    valueChangeHandler: streetChangeHandler,\n    inputBlurHanlder: streetBlurHandler,\n    reset: resetStreetInput\n  } = useInput(isEmpty); //   const [formInputsValidity, setFormInputsValidity] = useState({\n  //     name: true,\n  //     street: true,\n  //     city: true,\n  //     postalCode: true,\n  //   });\n  //   const nameInputRef = useRef();\n  //   const streetInputRef = useRef();\n  //   const postalCodeInputRef = useRef();\n  //   const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault(); // const enteredName = nameInputRef.current.value;\n    // const enteredStreet = streetInputRef.current.value;\n    // const enteredPostalCode = postalCodeInputRef.current.value;\n    // const enteredCity = cityInputRef.current.value;\n    // const enteredNameIsValid = !isEmpty(enteredName);\n    // const enteredStreetIsValid = !isEmpty(enteredStreet);\n    // const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    // const enteredCityIsValid = !isEmpty(enteredCity);\n    // setFormInputsValidity({\n    //   name: enteredNameIsValid,\n    //   street: enteredStreetIsValid,\n    //   city: enteredCityIsValid,\n    //   postalCode: enteredPostalCodeIsValid,\n    // });\n\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid; // && enteredPostalCodeIsValid &&\n    // enteredCityIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const orderData = {\n      name: enteredName,\n      street: enteredStreet // city: enteredCity,\n      // postalCode: enteredPostalCode,\n\n    };\n    console.log(orderData); // props.onConfirm(orderData);\n    // props.onCancel();\n\n    resetNameInput();\n    resetStreetInput();\n  }; //   const nameControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const streetControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const cityControlClasses = !formInputsValidity.city ? classes.invalid : \"\";\n  //   const postalCodeControlClasses = !formInputsValidity.postalCode ? classes.invalid: \"\";\n\n\n  const nameControlClasses = nameInputHasError ? classes.invalid : \"\";\n  const streetControlClasses = streetInputHasError ? classes.invalid : \"\"; // const cityControlClasses = !formInputsValidity.city ? classes.invalid : \"\";\n  // const postalCodeControlClasses = !formInputsValidity.postalCode\n  //   ? classes.invalid\n  //   : \"\";\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${nameControlClasses}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${streetControlClasses}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        onChange: streetChangeHandler,\n        onBlur: streetBlurHandler,\n        value: enteredStreet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), streetInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        type: \"submit\",\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"EIddya0b+fDcDBNuV5cmTC5QA9M=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/home/vladislav/Desktop/Work - Backup/React/react-meals/src/components/Cart/Checkout.js"],"names":["useRef","useState","useInput","classes","isNotEmpty","value","trim","Checkout","props","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHanlder","nameBlurHandler","reset","resetNameInput","enteredStreet","enteredStreetIsValid","streetInputHasError","streetChangeHandler","streetBlurHandler","resetStreetInput","isEmpty","confirmHandler","event","preventDefault","formIsValid","orderData","name","street","console","log","nameControlClasses","invalid","streetControlClasses","form","control","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nimport classes from \"./Checkout.module.css\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\n// const isFiveChars = (value) => value.trim().length === 5;\n\nconst Checkout = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHanlder: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetInputHasError,\n    valueChangeHandler: streetChangeHandler,\n    inputBlurHanlder: streetBlurHandler,\n    reset: resetStreetInput,\n  } = useInput(isEmpty);\n\n  //   const [formInputsValidity, setFormInputsValidity] = useState({\n  //     name: true,\n  //     street: true,\n  //     city: true,\n  //     postalCode: true,\n  //   });\n\n  //   const nameInputRef = useRef();\n  //   const streetInputRef = useRef();\n  //   const postalCodeInputRef = useRef();\n  //   const cityInputRef = useRef();\n\n  const confirmHandler = (event) => {\n    event.preventDefault();\n\n    // const enteredName = nameInputRef.current.value;\n    // const enteredStreet = streetInputRef.current.value;\n    // const enteredPostalCode = postalCodeInputRef.current.value;\n    // const enteredCity = cityInputRef.current.value;\n\n    // const enteredNameIsValid = !isEmpty(enteredName);\n    // const enteredStreetIsValid = !isEmpty(enteredStreet);\n    // const enteredPostalCodeIsValid = isFiveChars(enteredPostalCode);\n    // const enteredCityIsValid = !isEmpty(enteredCity);\n\n    // setFormInputsValidity({\n    //   name: enteredNameIsValid,\n    //   street: enteredStreetIsValid,\n    //   city: enteredCityIsValid,\n    //   postalCode: enteredPostalCodeIsValid,\n    // });\n\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid;\n    // && enteredPostalCodeIsValid &&\n    // enteredCityIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const orderData = {\n      name: enteredName,\n      street: enteredStreet,\n      // city: enteredCity,\n      // postalCode: enteredPostalCode,\n    };\n    console.log(orderData);\n\n    // props.onConfirm(orderData);\n    // props.onCancel();\n\n    resetNameInput();\n    resetStreetInput()\n  };\n\n  //   const nameControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const streetControlClasses = !formInputsValidity.name ? classes.invalid : \"\";\n  //   const cityControlClasses = !formInputsValidity.city ? classes.invalid : \"\";\n  //   const postalCodeControlClasses = !formInputsValidity.postalCode ? classes.invalid: \"\";\n\n  const nameControlClasses = nameInputHasError ? classes.invalid : \"\";\n  const streetControlClasses = streetInputHasError ? classes.invalid : \"\";\n  // const cityControlClasses = !formInputsValidity.city ? classes.invalid : \"\";\n  // const postalCodeControlClasses = !formInputsValidity.postalCode\n  //   ? classes.invalid\n  //   : \"\";\n\n  return (\n    <form className={classes.form} onSubmit={confirmHandler}>\n      <div className={`${classes.control} ${nameControlClasses}`}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && <p>Please enter a valid name.</p>}\n      </div>\n      <div className={`${classes.control} ${streetControlClasses}`}>\n        <label htmlFor=\"street\">Street</label>\n        <input\n          type=\"text\"\n          id=\"street\"\n          onChange={streetChangeHandler}\n          onBlur={streetBlurHandler}\n          value={enteredStreet}\n        />\n        {streetInputHasError && <p>Please enter a valid street.</p>}\n      </div>\n      {/* <div className={`${classes.control} ${postalCodeControlClasses}`}>\n        <label htmlFor=\"postal\">Postal Code</label>\n        <input type=\"text\" id=\"postal\" ref={postalCodeInputRef} />\n        {!formInputsValidity.postalCode && (\n          <p>Please enter a valid post code.</p>\n        )}\n      </div>\n      <div className={`${classes.control} ${cityControlClasses}`}>\n        <label htmlFor=\"city\">City</label>\n        <input type=\"text\" id=\"city\" ref={cityInputRef} />\n        {!formInputsValidity.city && <p>Please enter a valid city.</p>}\n      </div> */}\n      <div className={classes.actions}>\n        <button type=\"button\" onClick={props.onCancel}>\n          Cancel\n        </button>\n        <button className={classes.submit} type=\"submit\">\n          Confirm\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}